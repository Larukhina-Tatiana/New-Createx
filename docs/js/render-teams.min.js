let teamData=[];function showError(e){const a=document.querySelector(".team__list");a&&(a.innerHTML=`<li class="error-message" style="text-align: center; color: red; grid-column: 1 / -1; padding: 20px;">${e}</li>`)}function getErrorMessage(e){if(e.status){if(404===e.status)return"Файл с данными команды (team.json) не найден.";if(e.status>=500)return"Произошла ошибка на сервере. Пожалуйста, попробуйте позже."}return e.message&&e.message.includes("Failed to fetch")?"Не удалось подключиться к серверу. Проверьте ваше интернет-соединение.":"Произошла непредвиденная ошибка при загрузке данных."}async function loadTeamData(){const e=document.querySelector(".loader");e&&e.classList.add("loader--visible");try{const e=await fetch("./data/team.json");if(!e.ok)throw{status:e.status,message:`HTTP error! status: ${e.status}`};const a=await e.json();teamData=a,renderTeamMembers()}catch(e){console.error("Ошибка загрузки данных о команде:",e),showError(getErrorMessage(e))}finally{e&&e.classList.remove("loader--visible")}}function renderTeamMembers(){const e=document.querySelector(".team__list"),a=document.querySelector(".loader");if(!e)return void console.error("Контейнер .team__list не найден на странице.");const s=document.createDocumentFragment();if(!teamData||!Array.isArray(teamData.team))return void showError("Данные о команде имеют неверный формат.");teamData.team.forEach((e=>{const a=document.createElement("li");a.className="team__item animate-on-scroll";const t=e.socials.map((e=>`\n      <li class="social__item social__item--team">\n        <a class="social__link" href="${e.url}" aria-label="${e.label}" target="_blank"\n          rel="noopener noreferrer">\n          <svg focusable="false" aria-hidden="true">\n            <use href="/images/icons/sprite.svg#${e.name}"></use>\n          </svg>\n        </a>\n      </li>\n    `)).join("");a.innerHTML=`\n      <div class="team__thumb images__thumb images__thumb--team">\n        <picture>\n          <source type="image/avif" srcset="${e.image.base}@1x.avif 1x, ${e.image.base}@2x.avif 2x">\n          <source type="image/webp" srcset="${e.image.base}@1x.webp 1x, ${e.image.base}@2x.webp 2x">\n          <img class="images__img" src="${e.image.base}@1x.jpg" loading="lazy" decoding="async" alt="${e.image.alt}">\n        </picture>\n        <div class="team__hover">\n          <address class="social-media">\n            <ul class="social social--team">\n              ${t}\n            </ul>\n          </address>\n        </div>\n      </div>\n      <div class="team__caption">\n        <h3 class="team__subtitle section__titleh3">${e.name}</h3>\n        <p class="team__post">${e.post}</p>\n      </div>\n    `,s.appendChild(a)})),e.innerHTML="",e.appendChild(s),a&&(a.style.display="none");const t=e.querySelectorAll(".animate-on-scroll");if(t.length>0)if("IntersectionObserver"in window){const e=new IntersectionObserver((e=>{e.forEach((e=>{e.isIntersecting?e.target.classList.add("in-view"):e.target.classList.remove("in-view")}))}),{threshold:.2});t.forEach((a=>e.observe(a)))}else t.forEach((e=>e.classList.add("in-view")))}loadTeamData();