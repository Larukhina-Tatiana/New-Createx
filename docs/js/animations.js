// üé¨ –ì–ª–∞–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç, —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –≤—Å–µ–º–∏ –∞–Ω–∏–º–∞—Ü–∏—è–º–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
const Animations = {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏, –µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º "reduce motion"
  prefersReducedMotion: window.matchMedia("(prefers-reduced-motion: reduce)")
    .matches,

  // üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∞–Ω–∏–º–∞—Ü–∏–π –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM
  init() {
    document.addEventListener("DOMContentLoaded", () => {
      this.initShakeLoop(); // –ê–Ω–∏–º–∞—Ü–∏—è —Ç—Ä—è—Å–∫–∏
      this.initAppearance(); // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
      this.init3DTilt(); // 3D –Ω–∞–∫–ª–æ–Ω –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –º—ã—à–∏
    });
  },

  // üîÅ –ê–Ω–∏–º–∞—Ü–∏—è —Ç—Ä—è—Å–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∫–ª–∞—Å—Å–æ–º .shake
  initShakeLoop() {
    const elements = document.querySelectorAll(".animate-on-scroll");

    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é —Ç—Ä—è—Å–∫—É –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞
    const setupShakeLoop = (el) => {
      if (this.prefersReducedMotion || el.dataset.shaking === "true") return;

      el.dataset.shaking = "true";

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ç—Ä—è—Å–∫–∏
      const intervalId = setInterval(() => {
        el.classList.add("shake-loop");
        setTimeout(() => el.classList.remove("shake-loop"), 1200); // –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä—è—Å–∫–∏
      }, 3000); // –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ç—Ä—è—Å–∫–∞–º–∏

      el.dataset.shakeInterval = intervalId;
    };

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä—è—Å–∫—É –∏ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const clearShakeLoop = (el) => {
      const id = el.dataset.shakeInterval;
      if (id) clearInterval(id);
      delete el.dataset.shakeInterval;
      delete el.dataset.shaking;
      el.classList.remove("shake-loop");
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è/–∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∑–æ–Ω–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏
    const handleVisibilityChange = (el, isVisible) => {
      const isShake = el.classList.contains("shake");

      if (isVisible) {
        el.classList.add("in-view");
        if (isShake) setupShakeLoop(el);
      } else {
        el.classList.remove("in-view");
        if (isShake) clearShakeLoop(el);
      }
    };

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º IntersectionObserver, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    if ("IntersectionObserver" in window) {
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            handleVisibilityChange(entry.target, entry.isIntersecting);
          });
        },
        { threshold: 0.2 } // —ç–ª–µ–º–µ–Ω—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤–∏–¥–∏–º—ã–º, –µ—Å–ª–∏ 20% –µ–≥–æ –ø–ª–æ—â–∞–¥–∏ –≤ viewport
      );

      elements.forEach((el) => observer.observe(el));
    } else {
      // üîô –§–æ–ª–±—ç–∫ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
      const fallbackCheckVisibility = () => {
        elements.forEach((el) => {
          const rect = el.getBoundingClientRect();
          const visible = rect.top <= window.innerHeight && rect.bottom >= 0;
          handleVisibilityChange(el, visible);
        });
      };

      window.addEventListener("scroll", fallbackCheckVisibility);
      window.addEventListener("resize", fallbackCheckVisibility);
      fallbackCheckVisibility(); // –ø–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    }
  },

  // ‚ú® –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∫–ª–∞—Å—Å–∞–º–∏ —Ç–∏–ø–∞ appearance-*
  initAppearance() {
    let appearanceEls = [
      ...document.querySelectorAll("[class*='appearance-']"),
    ];

    // –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –ø–æ—è–≤–ª–µ–Ω–∏–µ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∑–æ–Ω–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const el = entry.target;
          const animateType = el.dataset.animate;
          const delayAttr = el.dataset.delay;
          const index = appearanceEls.indexOf(el);

          if (entry.isIntersecting) {
            // –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∞–Ω–∏–º–∞—Ü–∏–∏
            let delay = 0;
            if (animateType === "sync") delay = 0;
            else if (animateType === "chain") delay = 0.2 + index * 0.3;
            else if (animateType === "delay" && delayAttr)
              delay = parseFloat(delayAttr);

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            el.style.animationDelay = `${delay}s`;
            el.classList.add("visible");

            // –ï—Å–ª–∏ —Ü–µ–ø–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ
            if (animateType === "chain") {
              el.addEventListener(
                "animationend",
                () => {
                  const nextEl = appearanceEls[index + 1];
                  if (nextEl && !nextEl.classList.contains("visible")) {
                    nextEl.classList.add("visible");
                  }
                },
                { once: true }
              );
            }
          } else {
            // –°–±—Ä–æ—Å –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∑–æ–Ω—ã –≤–∏–¥–∏–º–æ—Å—Ç–∏
            el.classList.remove("visible");
          }
        });
      },
      {
        threshold: 0.2,
        rootMargin: "0px 0px -50px 0px", // —Å–º–µ—â–µ–Ω–∏–µ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã viewport
      }
    );

    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –≤—Å–µ–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    const observeAll = () => {
      appearanceEls.forEach((el) => observer.observe(el));
    };

    observeAll();

    // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –æ–∫–Ω–∞ ‚Äî –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ
    window.addEventListener("resize", () => {
      appearanceEls = [...document.querySelectorAll("[class*='appearance-']")];
      observeAll();
    });
  },

  // üåÄ 3D –Ω–∞–∫–ª–æ–Ω –±–ª–æ–∫–∞ –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –º—ã—à–∏
  init3DTilt() {
    const container = document.getElementById("js-container");
    const inner = document.getElementById("js-inner");

    // –ï—Å–ª–∏ –Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç ‚Äî –≤—ã—Ö–æ–¥–∏–º
    if (!container || !inner) return;

    // –û–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª–æ–∂–µ–Ω–∏—è –º—ã—à–∏
    const mouse = {
      _x: 0,
      _y: 0,
      x: 0,
      y: 0,

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º—ã—à–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
      updatePosition(event) {
        this.x = event.clientX - this._x;
        this.y = (event.clientY - this._y) * -1;
      },

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–∫—É –æ—Ç—Å—á—ë—Ç–∞ ‚Äî —Ü–µ–Ω—Ç—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
      setOrigin(el) {
        const rect = el.getBoundingClientRect();
        this._x = rect.left + rect.width / 2;
        this._y = rect.top + rect.height / 2;
      },
    };

    mouse.setOrigin(container);

    let counter = 0;
    const updateRate = 10;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ—Ä–∞ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é (–¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)
    const isTimeToUpdate = () => counter++ % updateRate === 0;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
    const update = (event) => {
      mouse.updatePosition(event);
      const x = (mouse.y / inner.offsetHeight / 2).toFixed(2);
      const y = (mouse.x / inner.offsetWidth / 2).toFixed(2);
      inner.style.transform = `rotateX(${x}deg) rotateY(${y}deg)`;
    };

    // –ù–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏
    container.addEventListener("mouseenter", update);
    container.addEventListener("mouseleave", () => (inner.style = ""));
    container.addEventListener("mousemove", (event) => {
      if (isTimeToUpdate()) update(event);
    });
  },
};

// üîß –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–¥—É–ª—å –∞–Ω–∏–º–∞—Ü–∏–π
Animations.init();
